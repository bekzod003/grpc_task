// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContacListClient is the client API for ContacList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContacListClient interface {
	Create(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	Add(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	Update(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	Delete(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error)
	Get(ctx context.Context, in *ContactRequestID, opts ...grpc.CallOption) (*ContactResponse, error)
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContactResponseSlice, error)
}

type contacListClient struct {
	cc grpc.ClientConnInterface
}

func NewContacListClient(cc grpc.ClientConnInterface) ContacListClient {
	return &contacListClient{cc}
}

func (c *contacListClient) Create(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/api.contacList/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contacListClient) Add(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/api.contacList/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contacListClient) Update(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/api.contacList/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contacListClient) Delete(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/api.contacList/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contacListClient) Get(ctx context.Context, in *ContactRequestID, opts ...grpc.CallOption) (*ContactResponse, error) {
	out := new(ContactResponse)
	err := c.cc.Invoke(ctx, "/api.contacList/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contacListClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ContactResponseSlice, error) {
	out := new(ContactResponseSlice)
	err := c.cc.Invoke(ctx, "/api.contacList/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContacListServer is the server API for ContacList service.
// All implementations must embed UnimplementedContacListServer
// for forward compatibility
type ContacListServer interface {
	Create(context.Context, *ContactRequest) (*ContactResponse, error)
	Add(context.Context, *ContactRequest) (*ContactResponse, error)
	Update(context.Context, *ContactRequest) (*ContactResponse, error)
	Delete(context.Context, *ContactRequest) (*ContactResponse, error)
	Get(context.Context, *ContactRequestID) (*ContactResponse, error)
	GetAll(context.Context, *emptypb.Empty) (*ContactResponseSlice, error)
	mustEmbedUnimplementedContacListServer()
}

// UnimplementedContacListServer must be embedded to have forward compatible implementations.
type UnimplementedContacListServer struct {
}

func (UnimplementedContacListServer) Create(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContacListServer) Add(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedContacListServer) Update(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedContacListServer) Delete(context.Context, *ContactRequest) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContacListServer) Get(context.Context, *ContactRequestID) (*ContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedContacListServer) GetAll(context.Context, *emptypb.Empty) (*ContactResponseSlice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedContacListServer) mustEmbedUnimplementedContacListServer() {}

// UnsafeContacListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContacListServer will
// result in compilation errors.
type UnsafeContacListServer interface {
	mustEmbedUnimplementedContacListServer()
}

func RegisterContacListServer(s grpc.ServiceRegistrar, srv ContacListServer) {
	s.RegisterService(&ContacList_ServiceDesc, srv)
}

func _ContacList_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).Create(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContacList_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).Add(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContacList_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).Update(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContacList_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).Delete(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContacList_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).Get(ctx, req.(*ContactRequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContacList_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacListServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacList/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacListServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ContacList_ServiceDesc is the grpc.ServiceDesc for ContacList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContacList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacList",
	HandlerType: (*ContacListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ContacList_Create_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ContacList_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContacList_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContacList_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContacList_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ContacList_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/contactist_server.proto",
}
